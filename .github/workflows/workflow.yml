name: CI/CD Pipeline
on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      force:
        description: "Enter 'force' if you want to force a refresh"
        required: false
        default: ""

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.4"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Set up poetry
        uses: abatilo/actions-poetry@v2.1.4
        with:
          poetry-version: 1.1.13

      - name: Configure poetry
        run: python -m poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s python -m poetry run pip --version || rm -rf .venv

        # Install Python Dependencies
      - name: Install dependencies
        run: |
          poetry install --no-interaction

        # Build App and Run Application Test
        # Deactivated
      # - name: Build Application and Run unit Test
      #   run: |
      #     nohup poetry run python run.py > log.txt 2>&1 & poetry run python -m pytest

  continuous-deployment:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    needs: [continuous-integration]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Create CodeDeploy Deployment
        id: deploy
        # Assuming the Deployment Group is already setup
        run: |
          aws deploy create-deployment \
            --application-name MyDeployOnCodedeploy \
            --deployment-group-name MySite \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}